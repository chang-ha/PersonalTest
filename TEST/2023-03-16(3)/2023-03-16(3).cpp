// 금일 강의 내용 : 형변환(암시적 형변환)

#include <iostream>

int main()
{
    {

        // 모든 자료형은 다른 자료형이 될 수 있음.(특정한 상황이 아니라면, 방법을 가리지 않는다면)
        // 형변환은 무조건 무언가를 한다(연산을 한다)
        // 잘라야하면 자르고, 늘려야하면 늘려서 비트를 변경한다
        // = 내가 의도한 것과 다른 값이 나올수 있음 (아예 허용을 안할수도 있음)
        bool bValue = true;
        int AValue = 0xffffffff;

        // true는 int에 들어가니까 1이 되었음
        // 자료형이 다르지만 형변환이 되었음 = 암시적 형변환
        AValue = bValue;

        // bValue = 0b00000000000000000000000000000001;
        // bValue가 Avalue에 들어가면?
        // AValue = 0b11111111111111111111111100000001;
        // 뒤에 1바이트 크기는 수정된다고 쳐도 앞에 나머지 비트들은 어떻게 되는가???
        // 컴파일러가 임의로 앞에 비트 값들을 수정함 << 내가 의도하지 않은 값들이 나올수도있음
        // (내의견 : 형변환시 주의 및 값을 확인하자!!!)

        int a = 0;
    }

    {
        // 아예 변환을 허용하지 않는 자료형
        int Value = 0;
        int* Ptr = nullptr;
        // Ptr = Value; << 포인터에는 int가 들어갈 수 없다 등,.. (역도 동일)
    }

    {
        // 모든건 자료형이 존재한다
        // 배열은 int[10] 자료형
        int Arr[10] = {};
        
        // int Value = Arr; << 이것도 형변환 불가능(에러 구문)

        // 그런데 포인터와 배열은 가능
        // 암시적 형변환
        // int *와 int[10]은 다른 자료형이지만 암시적으로 형변환 가능
        int* Ptr = Arr;
    }


    // "aaaaaaa" << const char[8]
    // const char* const <= const char[8]이 들어감 (암시적 형변환)
    printf_s("aaaaaaa");
}
