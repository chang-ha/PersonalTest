// 금일 강의내용 : 함수

// 함수의 선언방법
// 1. 함수는 다른 함수 내부에서는 선언하지 못하게 문법상 정의되어 있습니다.
// 2. 함수는 리턴값이라는것이 무조건 존재합니다.
// 3.
// 참고. 함수는 만들면 만들수록 느려진다. (큰 의미는 없음)
// 따라서 가장 빠른 코드는 메인에서 해결하는 것 (그치만 비효율적)

//    리턴값     함수의 이름      인자(이 함수에 넘길 메모리가 있느냐?
//     void      Funtcion        (                                    )
//     {
//
//     }


// 리턴값의 의미
// 이 함수의 결과를 외부로 보내겠다.
// void는 아무것도 보내지 않겠다

// 함수 이름의 필요성
// 변수 선언과 같음
// 함수도 ...해야하는 내용이 있고, 메모리를 써서 그것을 표현한다.
// 메모리가 존재한다면 그에 대한 위치가 필요하기 때문에 이름이 필수
// 이름은 메모리에서의 위치를 의미함

// 인자의 의미
// 무조건 그 실행흐름의 지역변수입니다.

// 리턴의 의미
// 자신을 호출한 외부 메모리영역에 전달하는 메모리값
// + 리턴값을 사용한 즉시 자신을 포함한 실행흐름을 끝낸다.
int Plus(int _Left, int _Right)
{
    // return의 뜻 : 반환한다.
    // _Left와 _Right를 더한값을 반환한다.
    return _Left + _Right;
}

// 이름이 같은 변수는 선언할 수 없다.
// Test함수와 main함수안의 각각의 _Value의 이름이 같은가????? X
// 함수를 실행하는데 필요한 메모리 비용은 언제가 인자 전체 크기 + a
void Test(int _Value)
{
    // Test_Value
    _Value = 10;
    return;
}

int main()
{
    // void Funtcion() {  } << 1. 다른 함수 내부에 함수선언 불가능

    int Result = Plus(20, 30);


    // 앞에서 배운 내용으로는 우리가 메모리 할당하는 방법은
    // int value = 20; << 이렇게 눈에도 보이고 4Byte라는 것도 보임

    // 아래 함수도 똑같이 4Byte를 사용한것임
    // 아래 함수를 사용하면 메모리에 Plus의 Return값이라는 보이지 않는 변수가 생김
    Plus(20, 30);

    // void는 sizeof할 수 없다. = 크기를 잴 수 없다.
    // sizeof(void);
    
    // Plus(20,30)을 sizeof를 할 수 있다는 뜻은 메모리에서 4Byte를 썻다는것.
    // 보이지 않는 Plus의 Return값이 있음을 알 수 있다. 
    int ReturnSize = sizeof(Plus(20, 30));


    // 아래 처럼하면 1Byte메모리를 사용한 것인가? X
    // Plus를 썻기 때문에 4Byte의 메모리 공간이 생겼을 수 밖에 없음
    // 4Byte값을 1Byte에 넣었을 뿐임.
    bool bResult = Plus(20, 30);

    // main_Value
    int _Value = 20;
    Test(_Value);
}


