코딩 스탠다드

1. if 한줄치기 금지
	if()
	  printf_s("");

2. namespace, using namespce 사용하기 금지
   namespace AProgramger...
   using namespace AProgramger

3. 소멸자 ~B는 절대 직접호출하지 않는다

4. virtual 함수를 사용하면 꼭 override를 붙여주기
부모코드
virtual void Test()
{

}

자식코드
void Test() override
{

}

5. template 특수화를 하면 꼭 template<>를 붙이기

template<typename DataType>
void Test(DataType _Value)
{

}

template<>
void Test(char _Value)
{

}

6. 내용을 변경하지 않는 함수면 반드시 const를 붙이기 (인자, 함수뒤에 상황에 맞춰서 혹은 둘다)
void Test(const char* _Char) const
{
	printf_s("%s", _Char);
}

7. vector자료형 사용 시 최초에 무조건 reverse로 배열크기 지정하고 사용하기
	(보통 vector자료형도 크기가 변하지 않는 배열을 대체하여 사용함 << 동적으로 변하는 자료형은 List를 사용)

8. casting시 반드시 명시적으로 할 것(암시적 형변환 X)
	1) static_cast
	   메모리 크기만 다른 값형태 형변환에서 사용한다

	2) reinterpret_cast
	   정수를 포인터로, 포인터를 정수로 변경할 떄 사용한다

	3) dynamic_cast
	   부모자식구조에서 사용됩니다. (다운캐스팅에 이용됩니다)

	4) const_cast << 존재만 한다. 안알려준다
	   콘스트를 풀어주는??? 것인듯 << 왜 const를 굳이 풀려고 하냐??? const는 값을 안바꾸겠다는 의도임

9. 리터럴 초기화 or 멤버이니셜라이저를 사용해 무조건 초기화 해주기 ( 둘 중에 뭘 쓰든 상관 없음)
class A
{
	int a = 10
	int b;
	A()
	 : b(10)
	{
	}
}